# -*- coding: utf-8 -*-
"""Wine QualityDecision_Tree_ML

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eW94BVAiYGjM9K-4J37u589-5o8Zua-H
"""

# 1. IMPORTS
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier, export_text, plot_tree
from sklearn.metrics import classification_report, confusion_matrix

# 2. DOWNLOAD DATA
df = pd.read_csv('/content/WineQT.csv')
print(df.shape)
df.info()

df.head()

# 3. EXPLORATORY DATA ANALYSIS
print(df['quality'].describe())
sns.histplot(df['quality'], bins=6, kde=False)
plt.title("Distribution of Wine Quality")
plt.xlabel("Quality scores (3â€“8)")
plt.show()

# 4. CREATE BINARY TARGET: Good (>=6) vs Bad (<6)
df['good'] = (df['quality'] >= 6).astype(int)
sns.countplot(x='good', data=df)
plt.title("Good (1) vs Bad (0) Wines")
plt.show()
print(df['good'].value_counts())

# 5. PREPROCESSING: DEFINE FEATURES & TARGET
X = df.drop(['quality','good'], axis=1)
y = df['good']
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, stratify=y, random_state=42
)

# 6. MODELING & HYPERPARAMETER TUNING
param_grid = {
    'max_depth': [3,5,7],
    'min_samples_leaf': [5,10,20]
}
dt = DecisionTreeClassifier(random_state=42, class_weight='balanced')
grid = GridSearchCV(dt, param_grid, cv=5, scoring='f1')
grid.fit(X_train, y_train)

print("Best params:", grid.best_params_)

# 7. PREDICTION & EVALUATION
best = grid.best_estimator_
y_pred = best.predict(X_test)

print(classification_report(y_test, y_pred, target_names=['Bad','Good']))
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Bad','Good'], yticklabels=['Bad','Good'])
plt.title("Confusion Matrix")
plt.ylabel("Actual")
plt.xlabel("Predicted")
plt.show()

# 8. MODEL INSPECTION: TEXT RULES
print(export_text(best, feature_names=list(X.columns)))

# 9. VISUALIZATION: DECISION TREE PLOT
plt.figure(figsize=(20,10))
plot_tree(best,
          feature_names=X.columns,
          class_names=['Bad','Good'],
          filled=True, rounded=True, max_depth=3, fontsize=10)
plt.title("Decision Tree (depth=3)")
plt.show()

# 9. SAVE MODEL
import joblib
joblib.dump(best, "wine_dt_model.joblib")